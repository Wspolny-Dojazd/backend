// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250326153920_RenameGroupStatusEnumValuesToPascalCase")]
    partial class RenameGroupStatusEnumValuesToPascalCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DestinationLat")
                        .HasColumnType("double")
                        .HasColumnName("destination_lat");

                    b.Property<double>("DestinationLon")
                        .HasColumnType("double")
                        .HasColumnName("destination_lon");

                    b.Property<string>("JoiningCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("joining_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("ENUM('NotStarted', 'Started')")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_Group");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Location");

                    b.HasIndex("UserId");

                    b.HasIndex("group_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Message");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tip");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Route");

                    b.HasIndex("group_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nickname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Model.UserConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("ENUM('Kilometers', 'Miles')")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("ENUM('English', 'Polish')")
                        .HasColumnName("language");

                    b.Property<string>("TimeSystem")
                        .IsRequired()
                        .HasColumnType("ENUM('TwelveHour', 'TwentyFourHour')")
                        .HasColumnName("time_system");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserConfiguration");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_configurations", (string)null);
                });

            modelBuilder.Entity("friends", b =>
                {
                    b.Property<int>("friend_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("friend_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("friends");
                });

            modelBuilder.Entity("group_members", b =>
                {
                    b.Property<int>("group_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("group_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("group_members");
                });

            modelBuilder.Entity("Domain.Model.Location", b =>
                {
                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Group", null)
                        .WithMany("LiveLocations")
                        .HasForeignKey("group_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Model.Message", b =>
                {
                    b.HasOne("Domain.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Model.Route", b =>
                {
                    b.HasOne("Domain.Model.Group", null)
                        .WithMany("Routes")
                        .HasForeignKey("group_id");
                });

            modelBuilder.Entity("Domain.Model.UserConfiguration", b =>
                {
                    b.HasOne("Domain.Model.User", null)
                        .WithOne("UserConfiguration")
                        .HasForeignKey("Domain.Model.UserConfiguration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("friends", b =>
                {
                    b.HasOne("Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("friend_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("group_members", b =>
                {
                    b.HasOne("Domain.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.Group", b =>
                {
                    b.Navigation("LiveLocations");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Navigation("UserConfiguration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
